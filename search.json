[{"path":"https://grantmcdermott.com/parttree/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Grant McDermott Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://grantmcdermott.com/parttree/articles/parttree-intro.html","id":"basic-use","dir":"Articles","previous_headings":"","what":"Basic use","title":"Introduction to parttree","text":"Let’s start loading parttree package alongside rpart, comes bundled base R installation ’ll use fitting decision trees (least, start ). basic examples follow, ’ll use well-known Palmer Penguins dataset demonstrate functionality. can load dataset via parent package (), import directly CSV .","code":"library(rpart)     # For fitting decisions trees library(parttree)  # This package (will automatically load ggplot2 too) #> Loading required package: ggplot2  theme_set(theme_linedraw())  # install.packages(\"palmerpenguins\") data(\"penguins\", package = \"palmerpenguins\") head(penguins) #> # A tibble: 6 × 8 #>   species island    bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex    year #>   <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int> #> 1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007 #> 2 Adelie  Torgersen           39.5          17.4         186    3800 fema…  2007 #> 3 Adelie  Torgersen           40.3          18           195    3250 fema…  2007 #> 4 Adelie  Torgersen           NA            NA            NA      NA NA     2007 #> 5 Adelie  Torgersen           36.7          19.3         193    3450 fema…  2007 #> 6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007 #> # … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g"},{"path":"https://grantmcdermott.com/parttree/articles/parttree-intro.html","id":"categorical-predictions","dir":"Articles","previous_headings":"Basic use","what":"Categorical predictions","title":"Introduction to parttree","text":"Say interested predicting penguins species function 1) flipper length 2) bill length. can visualize relationships simple scatter plot prior formal modeling.  Recasting terms decision tree easily done (e.g., rpart). However, visualizing resulting tree predictions raw data hard box parttree enters fray. main function users interact geom_parttree(), provides new geom layer ggplot2 objects.","code":"p =    ggplot(data = penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +   geom_point(aes(col = species)) p ## Fit a decision tree using the same variables as the above plot tree = rpart(species ~ flipper_length_mm + bill_length_mm, data = penguins)  ## Visualize the tree partitions by adding it to our plot with geom_parttree() p +     geom_parttree(data = tree, aes(fill=species), alpha = 0.1) +   labs(caption = \"Note: Points denote observations. Shaded regions denote model predictions.\")"},{"path":"https://grantmcdermott.com/parttree/articles/parttree-intro.html","id":"continuous-predictions","dir":"Articles","previous_headings":"Basic use > Categorical predictions","what":"Continuous predictions","title":"Introduction to parttree","text":"Trees continuous independent variables also supported. However, recommend adjusting plot fill aesthetic since model likely partition data intervals don’t match exactly raw data. easiest way setting colour fill aesthetic together part scale_colour_* call.","code":"tree2 = rpart(body_mass_g ~ flipper_length_mm + bill_length_mm, data=penguins)  ggplot(data = penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +   geom_parttree(data = tree2, aes(fill=body_mass_g), alpha = 0.3) +   geom_point(aes(col = body_mass_g)) +    scale_colour_viridis_c(aesthetics = c('colour', 'fill')) # NB: Set colour + fill together"},{"path":"https://grantmcdermott.com/parttree/articles/parttree-intro.html","id":"supported-model-classes","dir":"Articles","previous_headings":"","what":"Supported model classes","title":"Introduction to parttree","text":"Currently, package works decision trees created rpart partykit packages. Moreover, supports front-end modes call rpart::rpart() underlying engine; particular tidymodels (parsnip workflows) mlr3 packages. ’s quick example parsnip.","code":"set.seed(123) ## For consistent jitter  library(parsnip) library(titanic) ## Just for a different data set  titanic_train$Survived = as.factor(titanic_train$Survived)  ## Build our tree using parsnip (but with rpart as the model engine) ti_tree =   decision_tree() |>   set_engine(\"rpart\") |>   set_mode(\"classification\") |>   fit(Survived ~ Pclass + Age, data = titanic_train)  ## Plot the data and model partitions titanic_train |>   ggplot(aes(x=Pclass, y=Age)) +   geom_parttree(data = ti_tree, aes(fill=Survived), alpha = 0.1) +   geom_jitter(aes(col=Survived), alpha=0.7)"},{"path":"https://grantmcdermott.com/parttree/articles/parttree-intro.html","id":"plot-orientation","dir":"Articles","previous_headings":"","what":"Plot orientation","title":"Introduction to parttree","text":"Underneath hood, geom_parttree() calling companion parttree() function, coerces rpart tree object data frame easily understood ggplot2. example, consider first “tree” model earlier. ’s print output raw model. ’s get feed parttree(). , resulting data frame designed amenable ggplot2 geom layer, columns like xmin, xmax, etc. specifying aesthetics ggplot2 recognises. (Fun fact: geom_parttree() really just thin wrapper around geom_rect().) goal package abstract away kinds details user, can just specify geom_parttree() — valid tree object data input — done . However, generally works well, can sometimes lead unexpected behaviour terms plot orientation. ’s ’s hard guess ahead time user specify x y variables (.e. axes) plot layers. see mean, let’s redo penguin plot earlier, time switch axes main ggplot() call.  case , kind orientation mismatch normally (hopefully) pretty easy recognize. fix, can use flipaxes = TRUE argument flip orientation geom_parttree layer.","code":"tree #> n=342 (2 observations deleted due to missingness) #>  #> node), split, n, loss, yval, (yprob) #>       * denotes terminal node #>  #> 1) root 342 191 Adelie (0.441520468 0.198830409 0.359649123)   #>   2) flipper_length_mm< 206.5 213  64 Adelie (0.699530516 0.295774648 0.004694836)   #>     4) bill_length_mm< 43.35 150   5 Adelie (0.966666667 0.033333333 0.000000000) * #>     5) bill_length_mm>=43.35 63   5 Chinstrap (0.063492063 0.920634921 0.015873016) * #>   3) flipper_length_mm>=206.5 129   7 Gentoo (0.015503876 0.038759690 0.945736434) * parttree(tree) #>   node   species                                                  path  xmin #> 1    3    Gentoo                            flipper_length_mm >= 206.5 206.5 #> 2    4    Adelie  flipper_length_mm < 206.5 --> bill_length_mm < 43.35  -Inf #> 3    5 Chinstrap flipper_length_mm < 206.5 --> bill_length_mm >= 43.35  -Inf #>    xmax  ymin  ymax #> 1   Inf  -Inf   Inf #> 2 206.5  -Inf 43.35 #> 3 206.5 43.35   Inf ## First, redo our first plot but this time switch the x and y variables p3 =    ggplot(     data = penguins,      aes(x = bill_length_mm, y = flipper_length_mm) ## Switched!     ) +   geom_point(aes(col = species))  ## Add on our tree (and some preemptive titling..) p3 +   geom_parttree(data = tree, aes(fill = species), alpha = 0.1) +   labs(     title = \"Oops!\",     subtitle = \"Looks like a mismatch between our x and y axes...\"     ) p3 +   geom_parttree(     data = tree, aes(fill = species), alpha = 0.1,     flipaxes = TRUE  ## Flip the orientation     ) +   labs(title = \"That's better\")"},{"path":"https://grantmcdermott.com/parttree/articles/parttree-intro.html","id":"base-graphics","dir":"Articles","previous_headings":"","what":"Base graphics","title":"Introduction to parttree","text":"package primarily designed work ggplot2, parttree() infrastructure can also used generate plots base graphics. , ctree() function partykit used fitting tree.","code":"library(partykit) #> Loading required package: grid #> Loading required package: libcoin #> Loading required package: mvtnorm  ## CTree and corresponding partition ct = ctree(species ~ flipper_length_mm + bill_length_mm, data = penguins) pt = parttree(ct)  ## Color palette pal = palette.colors(4, \"R4\")[-1]  ## Maximum/minimum for plotting range as rect() does not handle Inf well m = 1000  ## scatter plot() with added rect() plot(   bill_length_mm ~ flipper_length_mm,    data = penguins, col = pal[species], pch = 19   ) rect(   pmax(-m, pt$xmin), pmax(-m, pt$ymin), pmin(m, pt$xmax), pmin(m, pt$ymax),   col = adjustcolor(pal, alpha.f = 0.1)[pt$species]   )"},{"path":"https://grantmcdermott.com/parttree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Grant McDermott. Author, maintainer. Achim Zeileis. Contributor. Brian Heseung Kim. Contributor. Julia Silge. Contributor.","code":""},{"path":"https://grantmcdermott.com/parttree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McDermott G (2023). parttree: Visualise simple decision tree partitions. https://github.com/grantmcdermott/parttree, http://grantmcdermott.com/parttree.","code":"@Manual{,   title = {parttree: Visualise simple decision tree partitions},   author = {Grant McDermott},   year = {2023},   note = {https://github.com/grantmcdermott/parttree, http://grantmcdermott.com/parttree}, }"},{"path":"https://grantmcdermott.com/parttree/index.html","id":"parttree-","dir":"","previous_headings":"","what":"Visualise simple decision tree partitions","title":"Visualise simple decision tree partitions","text":"Visualize simple 2-D decision tree partitions R. parttree package optimised work ggplot2, although can used visualize tree partitions base R graphics .","code":""},{"path":"https://grantmcdermott.com/parttree/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualise simple decision tree partitions","text":"package yet CRAN, can installed GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"grantmcdermott/parttree\")"},{"path":"https://grantmcdermott.com/parttree/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Visualise simple decision tree partitions","text":"parttree homepage includes introductory vignette detailed documentation. ’s quickstart example using “kyphosis” dataset comes bundled rpart package. case, interested predicting kyphosis recovery spinal surgery, function 1) number topmost vertebra operated, 2) patient age. key visualization layer —provided package—geom_partree().","code":"library(rpart)     # For the dataset and fitting decisions trees library(parttree)  # This package (will automatically load ggplot2 too) #> Loading required package: ggplot2  fit = rpart(Kyphosis ~ Start + Age, data = kyphosis)  ggplot(kyphosis, aes(x = Start, y = Age)) +   geom_parttree(data = fit, alpha = 0.1, aes(fill = Kyphosis)) + # <-- key layer   geom_point(aes(col = Kyphosis)) +   labs(     x = \"No. of topmost vertebra operated on\", y = \"Patient age (months)\",     caption = \"Note: Points denote observations. Shading denotes model predictions.\"     ) +   theme_minimal()"},{"path":"https://grantmcdermott.com/parttree/reference/geom_parttree.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise tree partitions — geom_parttree","title":"Visualise tree partitions — geom_parttree","text":"geom_parttree() simple extension ggplot2::geom_rect()first calls parttree() convert inputted tree object amenable data frame.","code":""},{"path":"https://grantmcdermott.com/parttree/reference/geom_parttree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise tree partitions — geom_parttree","text":"","code":"geom_parttree(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   linejoin = \"mitre\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   flipaxes = FALSE,   ... )"},{"path":"https://grantmcdermott.com/parttree/reference/geom_parttree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise tree partitions — geom_parttree","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data rpart::rpart.object object compatible type (e.g. decision tree constructed via partykit, tidymodels, mlr3 front-ends). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. linejoin Line join style (round, mitre, bevel). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). flipaxes Logical. default, \"x\" \"y\" axes variables plotting determined first split tree. can cause plot orientation mismatches depending users specify layers plot. Setting TRUE flip \"x\" \"y\" variables geom_parttree layer. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://grantmcdermott.com/parttree/reference/geom_parttree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualise tree partitions — geom_parttree","text":"way ggplot2 validates inputs assembles plot layers, note data input geom_parttree() (.e. decision tree object) must assigned layer ; initialising ggplot2::ggplot() call. See Examples.","code":""},{"path":"https://grantmcdermott.com/parttree/reference/geom_parttree.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Visualise tree partitions — geom_parttree","text":"geom_parttree() aims \"work----box\" minimal input user's side, apart specifying data object. includes taking care data transformation way , generally, produces optimal corner coordinates partition (.e. xmin, xmax, ymin, ymax). However, also understands following aesthetics users may choose specify manually: fill (particularly encouraged, since provide visual cue regarding prediction partition region) colour alpha linetype size","code":""},{"path":[]},{"path":"https://grantmcdermott.com/parttree/reference/geom_parttree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise tree partitions — geom_parttree","text":"","code":"library(rpart)  ### Simple decision tree (max of two predictor variables)  iris_tree = rpart(Species ~ Petal.Length + Petal.Width, data=iris)  ## Plot with original iris data only p = ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width)) +   geom_point(aes(col = Species))  ## Add tree partitions to the plot (borders only) p + geom_parttree(data = iris_tree)   ## Better to use fill and highlight predictions p + geom_parttree(data = iris_tree, aes(fill = Species), alpha=0.1)   ## To drop the black border lines (i.e. fill only) p + geom_parttree(data = iris_tree, aes(fill = Species), col = NA, alpha = 0.1)    ### Example with plot orientation mismatch  p2 = ggplot(iris, aes(x=Petal.Width, y=Petal.Length)) +   geom_point(aes(col=Species))  ## Oops p2 + geom_parttree(data = iris_tree, aes(fill=Species), alpha = 0.1)   ## Fix with 'flipaxes = TRUE' p2 + geom_parttree(data = iris_tree, aes(fill=Species), alpha = 0.1, flipaxes = TRUE)    ### Various front-end frameworks are also supported, e.g.:  library(parsnip)  iris_tree_parsnip =   decision_tree() %>%   set_engine(\"rpart\") %>%   set_mode(\"classification\") %>%   fit(Species ~ Petal.Length + Petal.Width, data=iris)  p + geom_parttree(data = iris_tree_parsnip, aes(fill=Species), alpha = 0.1)    ### Trees with continuous independent variables are also supported. But you ### may need to adjust (or switch off) the fill legend to match the original ### data, e.g.:  iris_tree_cont = rpart(Petal.Length ~ Sepal.Length + Petal.Width, data=iris) p3 = ggplot(data = iris, aes(x = Petal.Width, y = Sepal.Length)) +  geom_parttree(    data = iris_tree_cont,    aes(fill = Petal.Length), alpha=0.5    ) +   geom_point(aes(col = Petal.Length)) +   theme_minimal()  ## Legend scales don't quite match here: p3   ## Better to scale fill to the original data p3 + scale_fill_continuous(limits = range(iris$Petal.Length))"},{"path":"https://grantmcdermott.com/parttree/reference/parttree.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a decision tree into a data frame of partition coordinates — parttree","title":"Convert a decision tree into a data frame of partition coordinates — parttree","text":"Extracts terminal leaf nodes decision tree one two numeric predictor variables. leaf nodes converted data frame, row represents partition (leaf terminal node) can easily plotted coordinate space.","code":""},{"path":"https://grantmcdermott.com/parttree/reference/parttree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a decision tree into a data frame of partition coordinates — parttree","text":"","code":"parttree(tree, keep_as_dt = FALSE, flipaxes = FALSE)"},{"path":"https://grantmcdermott.com/parttree/reference/parttree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a decision tree into a data frame of partition coordinates — parttree","text":"tree tree object. Supported classes include rpart::rpart.object, compatible classes parsnip, workflows, mlr3 front-ends, constparty class inheriting partykit::party(). keep_as_dt Logical. function relies data.table internal data manipulation. coerce final return object regular data frame (default behavior) unless user specifies TRUE. flipaxes Logical. function automatically set y-axis variable first split variable tree provided unless user specifies TRUE.","code":""},{"path":"https://grantmcdermott.com/parttree/reference/parttree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a decision tree into a data frame of partition coordinates — parttree","text":"data frame comprising seven columns: leaf node, path, set coordinates understandable ggplot2 (.e., xmin, xmax, ymin, ymax), final column corresponding predicted value leaf.","code":""},{"path":"https://grantmcdermott.com/parttree/reference/parttree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a decision tree into a data frame of partition coordinates — parttree","text":"function can used regression classification tree containing one () two numeric predictors.","code":""},{"path":[]},{"path":"https://grantmcdermott.com/parttree/reference/parttree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a decision tree into a data frame of partition coordinates — parttree","text":"","code":"## rpart trees library(\"rpart\") rp = rpart(Species ~ Petal.Length + Petal.Width, data = iris) parttree(rp) #>   node    Species                                         path xmin xmax ymin #> 1    2     setosa                          Petal.Length < 2.45 -Inf 2.45 -Inf #> 2    6 versicolor  Petal.Length >= 2.45 --> Petal.Width < 1.75 2.45  Inf -Inf #> 3    7  virginica Petal.Length >= 2.45 --> Petal.Width >= 1.75 2.45  Inf 1.75 #>   ymax #> 1  Inf #> 2 1.75 #> 3  Inf  ## conditional inference trees library(\"partykit\") #> Loading required package: grid #> Loading required package: libcoin #> Loading required package: mvtnorm ct = ctree(Species ~ Petal.Length + Petal.Width, data = iris) parttree(ct) #>   node    Species #> 2    2     setosa #> 5    5 versicolor #> 6    6 versicolor #> 7    7  virginica #>                                                                path xmin xmax #> 2                                               Petal.Length <= 1.9 -Inf  1.9 #> 5 Petal.Length > 1.9 --> Petal.Width <= 1.7 --> Petal.Length <= 4.8  1.9  4.8 #> 6  Petal.Length > 1.9 --> Petal.Width <= 1.7 --> Petal.Length > 4.8  4.8  Inf #> 7                          Petal.Length > 1.9 --> Petal.Width > 1.7  1.9  Inf #>   ymin ymax #> 2 -Inf  Inf #> 5 -Inf  1.7 #> 6 -Inf  1.7 #> 7  1.7  Inf  ## rpart via partykit rp2 = as.party(rp) parttree(rp2) #>   node    Species                                         path xmin xmax ymin #> 2    2     setosa                          Petal.Length < 2.45 -Inf 2.45 -Inf #> 4    4 versicolor  Petal.Length >= 2.45 --> Petal.Width < 1.75 2.45  Inf -Inf #> 5    5  virginica Petal.Length >= 2.45 --> Petal.Width >= 1.75 2.45  Inf 1.75 #>   ymax #> 2  Inf #> 4 1.75 #> 5  Inf"},{"path":"https://grantmcdermott.com/parttree/news/index.html","id":"parttree-0019003","dir":"Changelog","previous_headings":"","what":"parttree 0.0.1.9003","title":"parttree 0.0.1.9003","text":"released 0.1","code":""},{"path":"https://grantmcdermott.com/parttree/news/index.html","id":"improvements-0-0-1-9003","dir":"Changelog","previous_headings":"","what":"Improvements","title":"parttree 0.0.1.9003","text":"Major speed-extracting parttree nodes coordinates complicated trees (#15). Add method tidymodels workflows objects fitted \"rpart\" engine (#7 @juliasilge).","code":""},{"path":"https://grantmcdermott.com/parttree/news/index.html","id":"bug-fixes-0-0-1-9003","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"parttree 0.0.1.9003","text":"Support negative values (#6 @pjgeens). Better handling single-level factors flipaxes (#5).","code":""},{"path":"https://grantmcdermott.com/parttree/news/index.html","id":"internals-0-0-1-9003","dir":"Changelog","previous_headings":"","what":"Internals","title":"parttree 0.0.1.9003","text":"Bump ggplot2 version dependency match deprecated functions 3.4.0. Switched “main” primary GitHub branch development. Added dedicated vignette.","code":""},{"path":"https://grantmcdermott.com/parttree/news/index.html","id":"parttree-001","dir":"Changelog","previous_headings":"","what":"parttree 0.0.1","title":"parttree 0.0.1","text":"Create parttree() generic. (, #3 @zeileis) Support partykit objects (.e. constparty class), turn allows support base plot methods. (#3 @zeileis) ggplot2 moves imports depends now automatically loaded parttree. Add flipaxes argument easy switching case mismatch plot orientation. (#2 @brhkim) Added NEWS.md file track changes package.","code":""},{"path":"https://grantmcdermott.com/parttree/news/index.html","id":"parttree-0009000","dir":"Changelog","previous_headings":"","what":"parttree 0.0.0.9000","title":"parttree 0.0.0.9000","text":"Initial set functions.","code":""}]
